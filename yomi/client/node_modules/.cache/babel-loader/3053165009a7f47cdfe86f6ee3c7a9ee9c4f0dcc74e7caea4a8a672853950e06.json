{"ast":null,"code":"var _jsxFileName = \"D:\\\\source\\\\repos\\\\Yomi\\\\JapaneseReadingWebsite\\\\yomi\\\\client\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport '../index.css';\nimport supabase from '../pages/supabaseclient.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz({\n  word,\n  answers,\n  current_num,\n  answeredQs,\n  onAnsweredQ,\n  format\n}) {\n  _s();\n  const [message, setMessage] = useState(/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 48\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 44\n  }, this));\n  const checkUser = async () => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user || !word) return;\n    const baseRecord = {\n      userName: user.email,\n      missedword_id: word.id\n    };\n    await supabase.from(\"missedPool\").insert([baseRecord]);\n  };\n\n  // clicking an answer choice\n  const handleClick = ans => {\n    if (answeredQs <= current_num) {\n      // if current q is not finished\n      if (ans.id === word.id) {\n        setCorrect(ans);\n        onAnsweredQ();\n      } else {\n        checkUser();\n        setMessage(/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 32\n          }, this), \"Wrong! Try Again\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 28\n        }, this));\n      }\n    }\n  };\n  const setEmpty = () => {\n    setMessage(/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"\\u3000\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 25\n      }, this), \"\\u3000\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 20\n    }, this));\n  };\n  const setCorrect = ans => {\n    setMessage(/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [word.English, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 38\n      }, this), \"Correct! Good Job\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 20\n    }, this)); // 1 is true\n  };\n\n  // reset the message when moving between questions (when current_num changes)\n  useEffect(() => {\n    answeredQs > current_num ? setCorrect() : setEmpty();\n  }, [current_num]);\n\n  // button component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [format.kanji == \"q\" ? word.kanji + \" \" : \"\", format.kana == \"q\" ? word.kana + \" \" : \"\", format.en == \"q\" ? word.English + \" \" : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), answers.map(answer => /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => handleClick(answer),\n      children: [format.kanji == \"a\" ? answer.kanji + \" \" : \"\", format.kana == \"a\" ? answer.kana + \" \" : \"\", format.en == \"a\" ? answer.English + \" \" : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }, this)), message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(Quiz, \"vv1QZH5sSq4nlO0483SssNGOf9o=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","Button","supabase","jsxDEV","_jsxDEV","Quiz","word","answers","current_num","answeredQs","onAnsweredQ","format","_s","message","setMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","checkUser","data","user","auth","getUser","baseRecord","userName","email","missedword_id","id","from","insert","handleClick","ans","setCorrect","setEmpty","English","className","kanji","kana","en","map","answer","variant","onClick","_c","$RefreshReg$"],"sources":["D:/source/repos/Yomi/JapaneseReadingWebsite/yomi/client/src/components/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport '../index.css';\r\nimport supabase from '../pages/supabaseclient.js';\r\n\r\nfunction Quiz({ word, answers, current_num, answeredQs, onAnsweredQ, format }) {\r\n    const [message, setMessage] = useState(<h3><br/></h3>);\r\n\r\n    const checkUser = async () => {\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        \r\n        if (!user || !word) return;\r\n      \r\n        const baseRecord = {\r\n          userName: user.email,\r\n          missedword_id: word.id\r\n        };\r\n         \r\n        await supabase.from(\"missedPool\").insert([baseRecord]);\r\n    };\r\n  \r\n    // clicking an answer choice\r\n    const handleClick = (ans) => {\r\n        if (answeredQs <= current_num) { // if current q is not finished\r\n            if (ans.id === word.id) {\r\n                setCorrect(ans);\r\n                onAnsweredQ();\r\n            }\r\n            else {\r\n                \r\n                checkUser(); \r\n                setMessage(<h3><br/>Wrong! Try Again</h3>);\r\n            }\r\n        }\r\n    };\r\n\r\n    const setEmpty = () => {\r\n        setMessage(<h3>　<br/>　</h3>);\r\n    }\r\n\r\n    const setCorrect = (ans) => {\r\n        setMessage(<h3>{word.English}<br/>Correct! Good Job</h3>); // 1 is true\r\n    }\r\n\r\n    // reset the message when moving between questions (when current_num changes)\r\n    useEffect(() => {answeredQs > current_num ? setCorrect() : setEmpty()}, [current_num]); \r\n\r\n    // button component\r\n    return (\r\n        <div className=\"question\">\r\n            <h2>\r\n                {format.kanji == \"q\" ? word.kanji+\" \" : \"\"}\r\n                {format.kana == \"q\" ? word.kana+\" \" : \"\"}\r\n                {format.en == \"q\" ? word.English+\" \" : \"\"}\r\n            </h2>\r\n            {answers.map((answer) => \r\n                <Button variant=\"contained\" onClick={() => handleClick(answer)}>\r\n                    {format.kanji == \"a\" ? answer.kanji+\" \" : \"\"}\r\n                    {format.kana == \"a\" ? answer.kana+\" \" : \"\"}\r\n                    {format.en == \"a\" ? answer.English+\" \" : \"\"}\r\n                </Button>)}\r\n            {message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}