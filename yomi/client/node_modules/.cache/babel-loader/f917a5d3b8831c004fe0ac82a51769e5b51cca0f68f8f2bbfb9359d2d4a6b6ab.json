{"ast":null,"code":"var _jsxFileName = \"D:\\\\source\\\\repos\\\\Yomi\\\\JapaneseReadingWebsite\\\\yomi\\\\client\\\\src\\\\pages\\\\Quizzes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Quiz from \"../components/Quiz.js\";\nimport { useLocation } from \"react-router\";\nimport supabase from \"../supabaseclient.js\";\nimport \"../styling/flashcard.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quizzes() {\n  _s();\n  // get lesson # from URL\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const lesson = searchParams.get(\"lesson\");\n  const qNum = searchParams.get(\"qnum\");\n  const kanji = searchParams.get(\"kj\");\n  const kana = searchParams.get(\"kn\");\n  const en = searchParams.get(\"en\");\n  const missed = searchParams.get(\"missed\");\n\n  // all words for this lesson\n  const [wordList, setWords] = useState([{\n    id: 0,\n    kana: \"loading\",\n    kanji: \"loading\",\n    English: \"loading\"\n  }]);\n  // random 10 words for this quiz\n  const [quizList, setQuiz] = useState([{\n    id: 0,\n    kana: \"loading...\",\n    kanji: \"loading...\",\n    English: \"loading...\"\n  }]);\n  // all possible answers for this quiz\n  const [answerList, setAnswer] = useState([[{\n    id: 0,\n    kana: \"loading...\",\n    kanji: \"loading...\",\n    English: \"loading...\"\n  }, {\n    id: 0,\n    kana: \"loading...\",\n    kanji: \"loading...\",\n    English: \"loading...\"\n  }, {\n    id: 0,\n    kana: \"loading...\",\n    kanji: \"loading...\",\n    English: \"loading...\"\n  }, {\n    id: 0,\n    kana: \"loading...\",\n    kanji: \"loading...\",\n    English: \"loading...\"\n  }]]);\n  const [size, setSize] = useState(0);\n  const [missedmode, setMissedmode] = useState(false);\n  // get this user\n  const [Username, setUsername] = useState(null);\n  useEffect(() => {\n    const checkUser = async () => {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      setUsername(user.email);\n    };\n    checkUser();\n    console.log(Username);\n  }, []);\n\n  // get words from DB\n  useEffect(() => {\n    async function getWords() {\n      const {\n        data,\n        error\n      } = await supabase.from(\"Words\").select(`id, kana, kanji, English`).eq(\"lesson\", lesson);\n      if (error) {\n        console.warn(error);\n      } else if (data) {\n        setWords(data);\n      }\n    }\n    async function getMissedWords() {\n      const {\n        data: {\n          user\n        }\n      } = await supabase.auth.getUser();\n      const {\n        data,\n        error\n      } = await supabase.from(\"Words\").select('id, kana, kanji, English, missedPool!inner(userName, failed_times, success_updatedStreak)').eq('missedPool.userName', user.email).eq('lesson', lesson); // string is fine\n\n      console.log(\"ðŸ“¦ Raw data from Supabase join:\", data);\n      console.log(\"ðŸ‘¤ Username:\", user.email);\n      console.log(\"ðŸ“˜ Lesson:\", lesson);\n      if (error) {\n        console.warn(error);\n      } else if (data) {\n        // Filter manually for failed > recovered\n        const filtered = data.filter(item => {\n          var _item$missedPool;\n          const pool = (_item$missedPool = item.missedPool) === null || _item$missedPool === void 0 ? void 0 : _item$missedPool[0];\n          return pool && pool.failed_times > pool.success_updatedStreak;\n        });\n        setWords(filtered.length > 0 ? filtered : [{\n          id: 0,\n          kana: \"Empty\",\n          kanji: \"(No missed words)\",\n          English: \"Empty (No missed words)\"\n        }]);\n        console.log(\"Filtered missed words:\", filtered);\n      }\n    }\n    if (missed === \"t\") {\n      getMissedWords();\n      setMissedmode(true);\n      console.log(\"missed words\");\n    } else {\n      getWords();\n      console.log(\"not missed words\");\n    }\n  }, [lesson, Username]);\n\n  // get words into quizList\n  useEffect(() => {\n    setQuiz(getQuestionChoices(wordList, qNum));\n  }, [wordList]);\n\n  // get words into answerList\n  useEffect(() => {\n    let ansBank = [];\n    quizList.map(row => {\n      ansBank = [...ansBank, getAnswerChoices(row, wordList)];\n    });\n    setAnswer(ansBank);\n  }, [quizList]);\n  useEffect(() => {\n    setSize(wordList.length);\n  }, [wordList]);\n\n  // keep track of current question and how many we've answered\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [answeredQs, setAnsweredQs] = useState(0);\n  const nextQ = () => {\n    // only lets you advance if you got this Q right\n    if (answeredQs > currentIndex) {\n      // don't go past number of questions\n      if (currentIndex < qNum - 1 || qNum == 0 && currentIndex < quizList.length - 1) {\n        setCurrentIndex(prevIndex => prevIndex + 1);\n      }\n    }\n  };\n  const prevQ = () => {\n    // don't go back further than 0\n    if (currentIndex !== 0) {\n      setCurrentIndex(prevIndex => prevIndex === 0 ? quizList.length - 1 : prevIndex - 1);\n    }\n  };\n  const setFirstQ = () => {\n    setCurrentIndex(0);\n  };\n  const setLastQ = () => {\n    // go to last answered question\n    if (answeredQs < quizList.length) {\n      setCurrentIndex(answeredQs);\n    } else {\n      setCurrentIndex(quizList.length - 1);\n    }\n  };\n\n  // function to choose 10 random words for each quiz\n  const getQuestionChoices = (wordList, quizLength) => {\n    if (answeredQs > 0) {\n      // already exists; do not recreate\n      return quizList;\n    }\n    if (quizLength === 0 || quizLength === \"0\" || wordList.length < qNum) {\n      // all questions\n      quizLength = wordList.length;\n    }\n    let answerBank = wordList.slice(); // .slice is creating a copy so we don't modify the original\n    let randInt = 0;\n    let result = [];\n    for (let i = 0; i < quizLength; i++) {\n      // choose a unique word, add it to quizList\n      randInt = Math.floor(Math.random() * answerBank.length);\n      result = [...result, answerBank[randInt]];\n      answerBank.splice(randInt, 1);\n    }\n    return result;\n  };\n\n  // function to choose 3 random wordList that aren't the word in question + the word (for mult choice answers)\n  const getAnswerChoices = (correct_ans, wordList) => {\n    if (wordList.length <= 1) {\n      // not yet loaded\n      return [];\n    }\n    let answerBank = wordList.slice();\n    let answers = [correct_ans];\n    // remove the correct answer from possible answers\n    answerBank = answerBank.filter(val => {\n      return val.id !== correct_ans.id;\n    });\n    let randInt = 0;\n    for (let i = 0; i < 3; i++) {\n      // choose a random word that's not the answer\n      randInt = Math.floor(Math.random() * answerBank.length);\n      // either add it before or after in the list (to randomize order)\n      if (Math.floor(Math.random() * 2)) {\n        answers = [...answers, answerBank[randInt]];\n      } else {\n        answers = [answerBank[randInt], ...answers];\n      }\n      answerBank.splice(randInt, 1);\n    }\n    return answers;\n  };\n  const onAnsweredQ = () => {\n    if (answeredQs < quizList.length) {\n      setAnsweredQs(answeredQs + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"page-title\",\n      children: [\"Lesson \", lesson, \" Quiz\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Quiz, {\n      word: quizList[currentIndex],\n      answers: answerList[currentIndex],\n      current_num: currentIndex,\n      answeredQs: answeredQs,\n      size: size,\n      missedmode: missedmode,\n      onAnsweredQ: onAnsweredQ,\n      lesson: lesson,\n      format: {\n        kanji: kanji,\n        kana: kana,\n        en: en\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setFirstQ,\n        children: \"<<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevQ,\n        children: \"<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this), \"\\xA0\", currentIndex + 1, \" / \", quizList.length, \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextQ,\n        children: \">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setLastQ,\n        children: \">>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this), \"\\xA0answered Qs: \", answeredQs, \" \\xA0\\xA0\", \" \", answeredQs >= quizList.length ? \"Complete!\" : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 242,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 5\n  }, this);\n}\n_s(Quizzes, \"9k6odYO9FGm57sE0In8tpcGs2HE=\", false, function () {\n  return [useLocation];\n});\n_c = Quizzes;\nexport default Quizzes;\nvar _c;\n$RefreshReg$(_c, \"Quizzes\");","map":{"version":3,"names":["React","useState","useEffect","Quiz","useLocation","supabase","jsxDEV","_jsxDEV","Quizzes","_s","location","searchParams","URLSearchParams","search","lesson","get","qNum","kanji","kana","en","missed","wordList","setWords","id","English","quizList","setQuiz","answerList","setAnswer","size","setSize","missedmode","setMissedmode","Username","setUsername","checkUser","data","user","auth","getUser","email","console","log","getWords","error","from","select","eq","warn","getMissedWords","filtered","filter","item","_item$missedPool","pool","missedPool","failed_times","success_updatedStreak","length","getQuestionChoices","ansBank","map","row","getAnswerChoices","currentIndex","setCurrentIndex","answeredQs","setAnsweredQs","nextQ","prevIndex","prevQ","setFirstQ","setLastQ","quizLength","answerBank","slice","randInt","result","i","Math","floor","random","splice","correct_ans","answers","val","onAnsweredQ","children","fileName","_jsxFileName","lineNumber","columnNumber","className","word","current_num","format","onClick","_c","$RefreshReg$"],"sources":["D:/source/repos/Yomi/JapaneseReadingWebsite/yomi/client/src/pages/Quizzes.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Quiz from \"../components/Quiz.js\";\r\nimport { useLocation } from \"react-router\";\r\nimport supabase from \"../supabaseclient.js\";\r\nimport \"../styling/flashcard.css\";\r\n\r\nfunction Quizzes() {\r\n  // get lesson # from URL\r\n  const location = useLocation();\r\n  const searchParams = new URLSearchParams(location.search);\r\n  const lesson = searchParams.get(\"lesson\");\r\n  const qNum = searchParams.get(\"qnum\");\r\n  const kanji = searchParams.get(\"kj\");\r\n  const kana = searchParams.get(\"kn\");\r\n  const en = searchParams.get(\"en\");\r\n  const missed = searchParams.get(\"missed\");\r\n\r\n  // all words for this lesson\r\n  const [wordList, setWords] = useState([\r\n    { id: 0, kana: \"loading\", kanji: \"loading\", English: \"loading\" },\r\n  ]);\r\n  // random 10 words for this quiz\r\n  const [quizList, setQuiz] = useState([\r\n    { id: 0, kana: \"loading...\", kanji: \"loading...\", English: \"loading...\" },\r\n  ]);\r\n  // all possible answers for this quiz\r\n  const [answerList, setAnswer] = useState([\r\n    [{ id: 0, kana: \"loading...\", kanji: \"loading...\", English: \"loading...\" },\r\n      { id: 0, kana: \"loading...\", kanji: \"loading...\", English: \"loading...\" },\r\n      { id: 0, kana: \"loading...\", kanji: \"loading...\", English: \"loading...\" },\r\n      { id: 0, kana: \"loading...\", kanji: \"loading...\", English: \"loading...\" }],\r\n  ]);\r\n  const [size, setSize] = useState(0);\r\n  const[missedmode, setMissedmode]= useState(false);\r\n  // get this user\r\n  const [Username, setUsername] = useState(null);\r\n  useEffect(() => {\r\n    const checkUser = async () => {\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n      setUsername(user.email);\r\n    };\r\n\r\n    checkUser();\r\n    console.log(Username);\r\n  }, []);\r\n\r\n  // get words from DB\r\n  useEffect(() => {\r\n    async function getWords() {\r\n      const { data, error } = await supabase\r\n        .from(\"Words\")\r\n        .select(`id, kana, kanji, English`)\r\n        .eq(\"lesson\", lesson);\r\n      if (error) {\r\n        console.warn(error);\r\n      } else if (data) {\r\n        setWords(data);\r\n      }\r\n    }\r\n\r\n    async function getMissedWords() {\r\n      const {\r\n        data: { user },\r\n      } = await supabase.auth.getUser();\r\n      \r\n      const { data, error } = await supabase\r\n      .from(\"Words\")\r\n      .select('id, kana, kanji, English, missedPool!inner(userName, failed_times, success_updatedStreak)')\r\n      .eq('missedPool.userName', user.email)\r\n      .eq('lesson', lesson); // string is fine\r\n    \r\n      console.log(\"ðŸ“¦ Raw data from Supabase join:\", data);\r\n      console.log(\"ðŸ‘¤ Username:\", user.email);\r\n      console.log(\"ðŸ“˜ Lesson:\", lesson);\r\n\r\n\r\n    if (error) {\r\n      console.warn(error);\r\n    } else if (data) {\r\n      // Filter manually for failed > recovered\r\n      const filtered = data.filter(item => {\r\n        const pool = item.missedPool?.[0]; \r\n        return pool && pool.failed_times > pool.success_updatedStreak;\r\n      });\r\n    \r\n      setWords(\r\n        filtered.length > 0\r\n          ? filtered\r\n          : [{ id: 0, kana: \"Empty\", kanji: \"(No missed words)\", English: \"Empty (No missed words)\" }]\r\n      );\r\n    \r\n      console.log(\"Filtered missed words:\", filtered);\r\n    }\r\n    }\r\n\r\n    if (missed === \"t\") {\r\n      getMissedWords();\r\n      setMissedmode(true);\r\n      console.log(\"missed words\");\r\n    }\r\n    else {\r\n      getWords();\r\n      console.log(\"not missed words\");\r\n    }\r\n  }, [lesson, Username]);\r\n    \r\n\r\n\r\n  // get words into quizList\r\n  useEffect(() => {\r\n    setQuiz(getQuestionChoices(wordList, qNum));\r\n  }, [wordList]);\r\n\r\n  // get words into answerList\r\n  useEffect(() => {\r\n    let ansBank = [];\r\n    quizList.map((row) => {\r\n      ansBank = [...ansBank, getAnswerChoices(row, wordList)];\r\n    })\r\n    setAnswer(ansBank);\r\n  }, [quizList])\r\n\r\n  useEffect(() => {\r\n    setSize(wordList.length);\r\n  }, [wordList]);\r\n\r\n\r\n\r\n  // keep track of current question and how many we've answered\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [answeredQs, setAnsweredQs] = useState(0);\r\n\r\n  const nextQ = () => {\r\n    // only lets you advance if you got this Q right\r\n    if (answeredQs > currentIndex) {\r\n      // don't go past number of questions\r\n      if (currentIndex < qNum - 1 || (qNum == 0 && currentIndex < quizList.length - 1)) {\r\n        setCurrentIndex((prevIndex) => (prevIndex + 1));\r\n      }\r\n    }\r\n  };\r\n\r\n  const prevQ = () => {\r\n    // don't go back further than 0\r\n    if (currentIndex !== 0) {\r\n      setCurrentIndex((prevIndex) =>\r\n        prevIndex === 0 ? quizList.length - 1 : prevIndex - 1\r\n      );\r\n    }\r\n  };\r\n\r\n  const setFirstQ = () => {\r\n    setCurrentIndex(0);\r\n  };\r\n\r\n  const setLastQ = () => {\r\n    // go to last answered question\r\n    if (answeredQs < quizList.length) {\r\n      setCurrentIndex(answeredQs);\r\n    } else {\r\n      setCurrentIndex(quizList.length - 1);\r\n    }\r\n  };\r\n\r\n\r\n\r\n  // function to choose 10 random words for each quiz\r\n  const getQuestionChoices = (wordList, quizLength) => {\r\n    if (answeredQs > 0) {\r\n      // already exists; do not recreate\r\n      return quizList;\r\n    }\r\n    if (quizLength === 0 || quizLength === \"0\" || wordList.length < qNum) {\r\n      // all questions\r\n      quizLength = wordList.length;\r\n    }\r\n    let answerBank = wordList.slice(); // .slice is creating a copy so we don't modify the original\r\n    let randInt = 0;\r\n    let result = [];\r\n    for (let i = 0; i < quizLength; i++) {\r\n      // choose a unique word, add it to quizList\r\n      randInt = Math.floor(Math.random() * answerBank.length);\r\n      result = [...result, answerBank[randInt]];\r\n      answerBank.splice(randInt, 1);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // function to choose 3 random wordList that aren't the word in question + the word (for mult choice answers)\r\n  const getAnswerChoices = (correct_ans, wordList) => {\r\n    if (wordList.length <= 1) {\r\n      // not yet loaded\r\n      return [];\r\n    }\r\n    let answerBank = wordList.slice();\r\n    let answers = [correct_ans];\r\n    // remove the correct answer from possible answers\r\n    answerBank = answerBank.filter((val) => {\r\n      return val.id !== correct_ans.id;\r\n    });\r\n    let randInt = 0;\r\n    for (let i = 0; i < 3; i++) {\r\n      // choose a random word that's not the answer\r\n      randInt = Math.floor(Math.random() * answerBank.length);\r\n      // either add it before or after in the list (to randomize order)\r\n      if (Math.floor(Math.random() * 2)) {\r\n        answers = [...answers, answerBank[randInt]];\r\n      } else {\r\n        answers = [answerBank[randInt], ...answers];\r\n      }\r\n      answerBank.splice(randInt, 1);\r\n    }\r\n    return answers;\r\n  };\r\n\r\n  const onAnsweredQ = () => {\r\n    if (answeredQs < quizList.length) {\r\n      setAnsweredQs(answeredQs + 1);\r\n    }\r\n  };\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <br />\r\n      <h1 className=\"page-title\">Lesson {lesson} Quiz</h1>\r\n      <Quiz\r\n        word={quizList[currentIndex]}\r\n        answers={answerList[currentIndex]}\r\n        current_num={currentIndex}\r\n        answeredQs={answeredQs}\r\n        size = {size}\r\n        missedmode = {missedmode}\r\n        onAnsweredQ={onAnsweredQ}\r\n        lesson={lesson} \r\n        format={{ kanji: kanji, kana: kana, en: en }}\r\n      />\r\n      <div>\r\n        <button onClick={setFirstQ}>&lt;&lt;</button>\r\n        <button onClick={prevQ}>&lt;</button>\r\n        &nbsp;{currentIndex + 1} / {quizList.length}&nbsp;\r\n        <button onClick={nextQ}>&gt;</button>\r\n        <button onClick={setLastQ}>&gt;&gt;</button>\r\n        &nbsp;answered Qs: {answeredQs} &nbsp;&nbsp;{\" \"}\r\n        {answeredQs >= quizList.length ? \"Complete!\" : \"\"}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quizzes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}