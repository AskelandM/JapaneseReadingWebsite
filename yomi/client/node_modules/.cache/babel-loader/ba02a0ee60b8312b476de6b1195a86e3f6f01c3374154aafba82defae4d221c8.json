{"ast":null,"code":"var _jsxFileName = \"D:\\\\source\\\\repos\\\\Yomi\\\\JapaneseReadingWebsite\\\\yomi\\\\client\\\\src\\\\components\\\\Concentration.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { Grid2, Stack } from \"@mui/material\";\nimport { useState, useEffect } from \"react\";\nimport ConcentrationCard from \"./ConcentrationCard\";\nimport supabase from \"../supabaseclient.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nasync function fetchWords(lesson) {\n  let answers = {};\n  let words = [];\n  let res = [];\n  await supabase.from(\"Words\").select(\"kana, kanji, English\").eq(\"lesson\", lesson).then(response => {\n    response.data.forEach(word => {\n      if (word.kanji && word.kana) {\n        words.push([word.kanji + \" (\" + word.kana + \")\", word.English]);\n      } else {\n        words.push([word.kana, word.English]);\n      }\n    });\n\n    // Shuffle the array\n    words.sort(() => Math.random() - 0.5);\n    words = words.slice(0, 8);\n    for (let i = 0; i < words.length; i++) {\n      res.push(words[i][0]);\n      res.push(words[i][1]);\n      answers[words[i][0]] = words[i][1];\n    }\n\n    //Shuffle words and their matches\n    res.sort(() => Math.random() - 0.5);\n  }).catch(error => {\n    console.error(\"Error fetching words:\", error);\n  });\n  return {\n    res,\n    answers\n  };\n}\nconst cardArray = [];\nconst Concentration = ({\n  lessonID\n}) => {\n  _s();\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [shuffledArray, setShuffledArray] = useState([]);\n  const [wonGame, setWonGame] = useState(false);\n  const [gameAnswers, setGameAnswers] = useState({});\n  const handleCardFlip = wordIndex => {\n    if (matchedCards.includes(wordIndex)) {\n      // Card is already matched\n      return false;\n    }\n    if (flippedCards.length < 2) {\n      // Add the card to flippedCards\n      setFlippedCards(prev => [...prev, wordIndex]);\n      //Card has been flipped\n      return true;\n    } else {\n      // Remove the card from flippedCards\n      setFlippedCards(prev => prev.filter(index => index !== wordIndex));\n      return false;\n    }\n  };\n  useEffect(() => {\n    if (shuffledArray.length === 0) {\n      fetchWords(lessonID).then(data => {\n        setShuffledArray(data.res);\n        setGameAnswers(data.answers);\n      });\n    }\n    if (flippedCards.length === 2) {\n      const [firstCard, secondCard] = flippedCards;\n      const firstWord = shuffledArray[firstCard];\n      const secondWord = shuffledArray[secondCard];\n      if (gameAnswers[firstWord] === secondWord || gameAnswers[secondWord] === firstWord) {\n        console.log(\"MATCH\");\n        matchedCards.push(firstCard);\n        matchedCards.push(secondCard);\n        if (matchedCards.length === shuffledArray.length) {\n          console.log(\"YOU WON\");\n          setWonGame(true);\n        }\n      } else {\n        console.log(\"NO MATCH\");\n      }\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 1000);\n    }\n  }, [flippedCards, gameAnswers, lessonID, matchedCards, shuffledArray]);\n  if (shuffledArray.length >= 16) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\",\n          color: \"green\"\n        },\n        children: wonGame ? \"YOU WIN\" : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid2, {\n        container: true,\n        spacing: 2,\n        children: Array.from({\n          length: 4\n        }).map((_, rowIndex) => /*#__PURE__*/_jsxDEV(Stack, {\n          spacing: 1,\n          children: Array.from({\n            length: 4\n          }).map((_, colIndex) => {\n            const wordIndex = rowIndex * 4 + colIndex;\n            const card = /*#__PURE__*/_jsxDEV(ConcentrationCard, {\n              wordIndex: wordIndex,\n              words: shuffledArray,\n              flippedCards: flippedCards,\n              matchedCards: matchedCards,\n              onCardFlip: handleCardFlip\n            }, wordIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 19\n            }, this);\n            cardArray.push(card);\n            return card;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\",\n          color: \"black\"\n        },\n        children: shuffledArray.length === 0 ? \"Loading...\" : \"Not enough words found, please select another lesson.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this);\n  }\n};\n_s(Concentration, \"hMl3+NVbv8jMgffJJBfVMwEwGdA=\");\n_c = Concentration;\nexport default Concentration;\nvar _c;\n$RefreshReg$(_c, \"Concentration\");","map":{"version":3,"names":["React","Grid2","Stack","useState","useEffect","ConcentrationCard","supabase","jsxDEV","_jsxDEV","fetchWords","lesson","answers","words","res","from","select","eq","then","response","data","forEach","word","kanji","kana","push","English","sort","Math","random","slice","i","length","catch","error","console","cardArray","Concentration","lessonID","_s","flippedCards","setFlippedCards","matchedCards","setMatchedCards","shuffledArray","setShuffledArray","wonGame","setWonGame","gameAnswers","setGameAnswers","handleCardFlip","wordIndex","includes","prev","filter","index","firstCard","secondCard","firstWord","secondWord","log","setTimeout","style","display","flexDirection","justifyContent","alignItems","children","textAlign","color","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","Array","map","_","rowIndex","colIndex","card","onCardFlip","_c","$RefreshReg$"],"sources":["D:/source/repos/Yomi/JapaneseReadingWebsite/yomi/client/src/components/Concentration.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { Grid2, Stack } from \"@mui/material\";\r\nimport { useState, useEffect } from \"react\";\r\nimport ConcentrationCard from \"./ConcentrationCard\";\r\nimport supabase from \"../supabaseclient.js\";\r\n\r\nasync function fetchWords(lesson) {\r\n  let answers = {};\r\n  let words = [];\r\n  let res = [];\r\n\r\n  await supabase\r\n    .from(\"Words\")\r\n    .select(\"kana, kanji, English\")\r\n    .eq(\"lesson\", lesson)\r\n    .then((response) => {\r\n      response.data.forEach((word) => {\r\n        if (word.kanji && word.kana) {\r\n          words.push([word.kanji + \" (\" + word.kana + \")\", word.English]);\r\n        } else {\r\n          words.push([word.kana, word.English]);\r\n        }\r\n      });\r\n\r\n      // Shuffle the array\r\n      words.sort(() => Math.random() - 0.5);\r\n      words = words.slice(0, 8);\r\n      for (let i = 0; i < words.length; i++) {\r\n        res.push(words[i][0]);\r\n        res.push(words[i][1]);\r\n        answers[words[i][0]] = words[i][1];\r\n      }\r\n\r\n      //Shuffle words and their matches\r\n      res.sort(() => Math.random() - 0.5);\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error fetching words:\", error);\r\n    });\r\n\r\n  return { res, answers };\r\n}\r\n\r\nconst cardArray = [];\r\n\r\nconst Concentration = ({ lessonID }) => {\r\n  const [flippedCards, setFlippedCards] = useState([]);\r\n  const [matchedCards, setMatchedCards] = useState([]);\r\n  const [shuffledArray, setShuffledArray] = useState([]);\r\n  const [wonGame, setWonGame] = useState(false);\r\n  const [gameAnswers, setGameAnswers] = useState({});\r\n\r\n  const handleCardFlip = (wordIndex) => {\r\n    if (matchedCards.includes(wordIndex)) {\r\n      // Card is already matched\r\n      return false;\r\n    }\r\n    if (flippedCards.length < 2) {\r\n      // Add the card to flippedCards\r\n      setFlippedCards((prev) => [...prev, wordIndex]);\r\n      //Card has been flipped\r\n      return true;\r\n    } else {\r\n      // Remove the card from flippedCards\r\n      setFlippedCards((prev) => prev.filter((index) => index !== wordIndex));\r\n      return false;\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (shuffledArray.length === 0) {\r\n      fetchWords(lessonID).then((data) => {\r\n        setShuffledArray(data.res);\r\n        setGameAnswers(data.answers);\r\n      });\r\n    }\r\n\r\n    if (flippedCards.length === 2) {\r\n      const [firstCard, secondCard] = flippedCards;\r\n      const firstWord = shuffledArray[firstCard];\r\n      const secondWord = shuffledArray[secondCard];\r\n      if (\r\n        gameAnswers[firstWord] === secondWord ||\r\n        gameAnswers[secondWord] === firstWord\r\n      ) {\r\n        console.log(\"MATCH\");\r\n        matchedCards.push(firstCard);\r\n        matchedCards.push(secondCard);\r\n\r\n        if (matchedCards.length === shuffledArray.length) {\r\n          console.log(\"YOU WON\");\r\n          setWonGame(true);\r\n        }\r\n      } else {\r\n        console.log(\"NO MATCH\");\r\n      }\r\n      setTimeout(() => {\r\n        setFlippedCards([]);\r\n      }, 1000);\r\n    }\r\n  }, [flippedCards, gameAnswers, lessonID, matchedCards, shuffledArray]);\r\n\r\n  if (shuffledArray.length >= 16) {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <h1 style={{ textAlign: \"center\", color: \"green\" }}>\r\n          {wonGame ? \"YOU WIN\" : \"\"}\r\n        </h1>\r\n        <Grid2 container spacing={2}>\r\n          {Array.from({ length: 4 }).map((_, rowIndex) => (\r\n            <Stack spacing={1}>\r\n              {Array.from({ length: 4 }).map((_, colIndex) => {\r\n                const wordIndex = rowIndex * 4 + colIndex;\r\n                const card = (\r\n                  <ConcentrationCard\r\n                    key={wordIndex}\r\n                    wordIndex={wordIndex}\r\n                    words={shuffledArray}\r\n                    flippedCards={flippedCards}\r\n                    matchedCards={matchedCards}\r\n                    onCardFlip={handleCardFlip}\r\n                  />\r\n                );\r\n                cardArray.push(card);\r\n                return card;\r\n              })}\r\n            </Stack>\r\n          ))}\r\n        </Grid2>\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          alignItems: \"center\",\r\n        }}\r\n      >\r\n        <h1 style={{ textAlign: \"center\", color: \"black\" }}>\r\n          {shuffledArray.length === 0\r\n            ? \"Loading...\"\r\n            : \"Not enough words found, please select another lesson.\"}\r\n        </h1>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Concentration;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}