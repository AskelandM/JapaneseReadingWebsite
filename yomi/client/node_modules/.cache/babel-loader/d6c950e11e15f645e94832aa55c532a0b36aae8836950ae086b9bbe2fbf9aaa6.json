{"ast":null,"code":"var _jsxFileName = \"D:\\\\source\\\\repos\\\\Yomi\\\\JapaneseReadingWebsite\\\\yomi\\\\client\\\\src\\\\pages\\\\Quizzes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Quiz from '../components/Quiz.js';\nimport { useLocation } from 'react-router';\nimport supabase from './supabaseclient.js';\nimport '../flashcard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quizzes() {\n  _s();\n  // get lesson # from URL\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const lesson = searchParams.get(\"lesson\");\n  const [wordList, setWords] = React.useState([{\n    kana: \"loading...\",\n    kanji: \"loading...\",\n    Enlgish: \"loading...\"\n  }]);\n\n  // get words from DB\n  useEffect(() => {\n    async function getWords() {\n      const {\n        data,\n        error\n      } = await supabase.from('Words').select(`kana, kanji, English`).eq('lesson', lesson);\n      if (error) {\n        console.warn(error);\n      } else if (data) {\n        // wordList = data;   \n        setWords(data);\n      }\n      console.log(\"from DB:\");\n      console.log(wordList);\n    }\n    getWords();\n  }, []);\n\n  // keep track of current question and how many we've answered\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [answeredQs, setAnsweredQs] = useState(0);\n  const nextQ = () => {\n    // only lets you advance if you got this Q right\n    if (answeredQs > currentIndex) {\n      setCurrentIndex(prevIndex => (prevIndex + 1) % wordList.length);\n    }\n  };\n  const prevQ = () => {\n    // don't go back further than 0\n    if (currentIndex !== 0) {\n      setCurrentIndex(prevIndex => prevIndex === 0 ? wordList.length - 1 : prevIndex - 1);\n    }\n  };\n  const setFirstQ = () => {\n    setCurrentIndex(0);\n  };\n  const setLastQ = () => {\n    // only go to last Q if all questions are answered\n    if (answeredQs >= wordList.length - 1) {\n      setCurrentIndex(wordList.length - 1);\n    }\n  };\n\n  // function to choose 3 random wordList that aren't the word in question + the word (for mult choice answers) \n  const getAnswerChoices = (index, wordList) => {\n    if (wordList.length <= 1) {\n      // not yet loaded\n      return [];\n    }\n    let answerBank = wordList.slice();\n    let answers = [answerBank[index].English];\n    answerBank.splice(index, 1);\n    let randInt = 0;\n    for (let i = 0; i < 3; i++) {\n      // choose a random word that's not the answer\n      randInt = Math.floor(Math.random() * answerBank.length);\n      // either add it before or after in the list (to randomize order)\n      if (Math.floor(Math.random() * 2)) {\n        answers = [...answers, answerBank[randInt].English];\n      } else {\n        answers = [answerBank[randInt].English, ...answers];\n      }\n      answerBank.splice(randInt, 1);\n    }\n    return answers;\n  };\n  const onAnsweredQ = () => {\n    if (answeredQs < wordList.length) {\n      setAnsweredQs(answeredQs + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"page-title\",\n      children: [\"Lesson \", lesson, \" Quiz\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Quiz, {\n      word: wordList[currentIndex],\n      answers: getAnswerChoices(currentIndex, wordList),\n      current_num: currentIndex,\n      answeredQs: answeredQs,\n      onAnsweredQ: onAnsweredQ\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setFirstQ,\n        children: \"<<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevQ,\n        children: \"<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), \"\\xA0\", currentIndex + 1, \" / \", wordList.length, \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextQ,\n        children: \">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setLastQ,\n        children: \">>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), \"\\xA0answered Qs: \", answeredQs, \" \\xA0\\xA0 \", answeredQs >= wordList.length ? \"Complete!\" : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n_s(Quizzes, \"wq8LbtLEBsRgF+bpTHNnLh4mwnM=\", false, function () {\n  return [useLocation];\n});\n_c = Quizzes;\n;\nexport default Quizzes;\nvar _c;\n$RefreshReg$(_c, \"Quizzes\");","map":{"version":3,"names":["React","useState","useEffect","Quiz","useLocation","supabase","jsxDEV","_jsxDEV","Quizzes","_s","location","searchParams","URLSearchParams","search","lesson","get","wordList","setWords","kana","kanji","Enlgish","getWords","data","error","from","select","eq","console","warn","log","currentIndex","setCurrentIndex","answeredQs","setAnsweredQs","nextQ","prevIndex","length","prevQ","setFirstQ","setLastQ","getAnswerChoices","index","answerBank","slice","answers","English","splice","randInt","i","Math","floor","random","onAnsweredQ","children","fileName","_jsxFileName","lineNumber","columnNumber","className","word","current_num","onClick","_c","$RefreshReg$"],"sources":["D:/source/repos/Yomi/JapaneseReadingWebsite/yomi/client/src/pages/Quizzes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Quiz from '../components/Quiz.js';\r\nimport { useLocation } from 'react-router';\r\nimport supabase from './supabaseclient.js';\r\nimport '../flashcard.css';\r\n\r\nfunction Quizzes () {\r\n    // get lesson # from URL\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(\r\n        location.search\r\n    );\r\n    const lesson = searchParams.get(\"lesson\");\r\n\r\n    const [wordList, setWords] = React.useState([{kana: \"loading...\", kanji: \"loading...\", Enlgish: \"loading...\"}]);\r\n\r\n    // get words from DB\r\n    useEffect(() => {       \r\n        async function getWords() {         \r\n            const { data, error } = await supabase        \r\n            .from('Words')        \r\n            .select(`kana, kanji, English`)        \r\n            .eq('lesson', lesson)               \r\n            if (error) {          \r\n                console.warn(error)        \r\n            } else if (data) { \r\n                // wordList = data;   \r\n                setWords(data);   \r\n            }      \r\n            console.log(\"from DB:\");\r\n            console.log(wordList);\r\n        }\r\n\r\n        getWords() \r\n    }, [])\r\n\r\n    // keep track of current question and how many we've answered\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [answeredQs, setAnsweredQs] = useState(0);\r\n\r\n    const nextQ = () => {\r\n        // only lets you advance if you got this Q right\r\n        if (answeredQs > currentIndex) {\r\n            setCurrentIndex((prevIndex) => (prevIndex + 1) % wordList.length);\r\n        }\r\n    };\r\n\r\n    const prevQ = () => {\r\n        // don't go back further than 0\r\n        if (currentIndex !== 0) {\r\n            setCurrentIndex((prevIndex) => prevIndex === 0 ? wordList.length - 1 : prevIndex - 1);\r\n        }\r\n    };\r\n\r\n    const setFirstQ = () => {\r\n        setCurrentIndex(0);\r\n    }\r\n\r\n    const setLastQ = () => {\r\n        // only go to last Q if all questions are answered\r\n        if (answeredQs >= (wordList.length - 1)) {\r\n            setCurrentIndex(wordList.length - 1);\r\n        }\r\n    }\r\n\r\n    // function to choose 3 random wordList that aren't the word in question + the word (for mult choice answers) \r\n    const getAnswerChoices = (index, wordList) => {\r\n        if (wordList.length <= 1) {\r\n            // not yet loaded\r\n            return [];\r\n        }\r\n        let answerBank = wordList.slice();\r\n        let answers = [answerBank[index].English];\r\n        answerBank.splice(index, 1);\r\n        let randInt = 0;\r\n        for (let i = 0; i < 3; i++) {\r\n            // choose a random word that's not the answer\r\n            randInt = Math.floor(Math.random() * (answerBank.length));\r\n            // either add it before or after in the list (to randomize order)\r\n            if (Math.floor(Math.random() * 2)) {\r\n                answers = [...answers, answerBank[randInt].English];\r\n            }\r\n            else {\r\n                answers = [answerBank[randInt].English, ...answers];\r\n            }\r\n            answerBank.splice(randInt, 1);\r\n        }\r\n        return answers;\r\n    }\r\n\r\n    const onAnsweredQ = () => {\r\n        if (answeredQs < wordList.length) {\r\n            setAnsweredQs(answeredQs + 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <h1 className='page-title'>Lesson {lesson} Quiz</h1>\r\n            <Quiz word={wordList[currentIndex]} \r\n                answers={getAnswerChoices(currentIndex, wordList)} \r\n                current_num={currentIndex}\r\n                answeredQs={answeredQs} \r\n                onAnsweredQ={onAnsweredQ} \r\n            />\r\n            <div>\r\n                <button onClick={setFirstQ}>&lt;&lt;</button>\r\n                <button onClick={prevQ}>&lt;</button>\r\n                &nbsp;{currentIndex + 1} / {wordList.length}&nbsp;\r\n                <button onClick={nextQ}>&gt;</button>\r\n                <button onClick={setLastQ}>&gt;&gt;</button>\r\n                &nbsp;answered Qs: {answeredQs} &nbsp;&nbsp; {answeredQs >= wordList.length ? \"Complete!\" : \"\"}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Quizzes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}