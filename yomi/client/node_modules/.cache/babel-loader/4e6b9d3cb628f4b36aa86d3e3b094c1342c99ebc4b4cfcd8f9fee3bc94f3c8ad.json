{"ast":null,"code":"var _jsxFileName = \"D:\\\\source\\\\repos\\\\Yomi\\\\JapaneseReadingWebsite\\\\yomi\\\\client\\\\src\\\\pages\\\\Quizzes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Quiz from '../components/Quiz.js';\nimport { useLocation } from 'react-router';\nimport supabase from './supabaseclient.js';\nimport '../flashcard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quizzes() {\n  _s();\n  // get lesson # from URL\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const lesson = searchParams.get(\"lesson\");\n\n  // all words for this lesson\n  const [wordList, setWords] = React.useState([{\n    kana: \"loading\",\n    kanji: \"loading\",\n    English: \"loading\"\n  }]);\n  // random 10 words for this quiz\n  const [quizList, setQuiz] = React.useState([{\n    kana: \"loading...\",\n    kanji: \"loading...\",\n    English: \"loading...\"\n  }]);\n\n  // get words from DB\n  useEffect(() => {\n    async function getWords() {\n      const {\n        data,\n        error\n      } = await supabase.from('Words').select(`kana, kanji, English`).eq('lesson', lesson);\n      if (error) {\n        console.warn(error);\n      } else if (data) {\n        setWords(data);\n      }\n    }\n    getWords();\n  }, [lesson]);\n\n  // get words into quizList\n  useEffect(() => {\n    setQuiz(getQuestionChoices(wordList, 10));\n  }, [wordList]);\n\n  // keep track of current question and how many we've answered\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [answeredQs, setAnsweredQs] = useState(0);\n  const nextQ = () => {\n    // only lets you advance if you got this Q right\n    if (answeredQs > currentIndex) {\n      setCurrentIndex(prevIndex => (prevIndex + 1) % quizList.length);\n    }\n  };\n  const prevQ = () => {\n    // don't go back further than 0\n    if (currentIndex !== 0) {\n      setCurrentIndex(prevIndex => prevIndex === 0 ? quizList.length - 1 : prevIndex - 1);\n    }\n  };\n  const setFirstQ = () => {\n    setCurrentIndex(0);\n  };\n  const setLastQ = () => {\n    // go to last answered question\n    if (answeredQs < quizList.length) {\n      setCurrentIndex(answeredQs);\n    } else {\n      setCurrentIndex(quizList.length - 1);\n    }\n  };\n\n  // function to choose 10 random words for each quiz\n  const getQuestionChoices = (wordList, quizLength) => {\n    if (answeredQs > 0) {\n      // already exists; do not recreate\n      return quizList;\n    }\n    let answerBank = wordList.slice(); // .slice is creating a copy so we don't modify the original\n    let randInt = 0;\n    let result = [];\n    for (let i = 0; i < quizLength; i++) {\n      // choose a unique word, add it to quizList\n      randInt = Math.floor(Math.random() * answerBank.length);\n      result = [...result, answerBank[randInt]];\n      answerBank.splice(randInt, 1);\n    }\n    return result;\n  };\n\n  // function to choose 3 random wordList that aren't the word in question + the word (for mult choice answers) \n  const getAnswerChoices = (index, wordList) => {\n    if (wordList.length <= 1) {\n      // not yet loaded\n      return [];\n    }\n    let answerBank = wordList.slice();\n    let answers = [quizList[index].English];\n    // remove the correct answer from possible answers\n    answerBank = answerBank.filter(val => {\n      return val.English !== quizList[index].English;\n    });\n    let randInt = 0;\n    for (let i = 0; i < 3; i++) {\n      // choose a random word that's not the answer\n      randInt = Math.floor(Math.random() * answerBank.length);\n      // either add it before or after in the list (to randomize order)\n      if (Math.floor(Math.random() * 2)) {\n        answers = [...answers, answerBank[randInt].English];\n      } else {\n        answers = [answerBank[randInt].English, ...answers];\n      }\n      answerBank.splice(randInt, 1);\n    }\n    return answers;\n  };\n  const onAnsweredQ = () => {\n    if (answeredQs < quizList.length) {\n      setAnsweredQs(answeredQs + 1);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"page-title\",\n      children: [\"Lesson \", lesson, \" Quiz\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Quiz, {\n      word: quizList[currentIndex],\n      answers: getAnswerChoices(currentIndex, wordList),\n      current_num: currentIndex,\n      answeredQs: answeredQs,\n      onAnsweredQ: onAnsweredQ\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"js\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setFirstQ,\n        children: \"<<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevQ,\n        children: \"<\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 17\n      }, this), \"\\xA0\", currentIndex + 1, \" / \", quizList.length, \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextQ,\n        children: \">\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: setLastQ,\n        children: \">>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), \"\\xA0answered Qs: \", answeredQs, \" \\xA0\\xA0 \", answeredQs >= quizList.length ? \"Complete!\" : \"\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 9\n  }, this);\n}\n_s(Quizzes, \"FZhKprU5ShD44dAvBxX+BSnw3wI=\", false, function () {\n  return [useLocation];\n});\n_c = Quizzes;\n;\nexport default Quizzes;\nvar _c;\n$RefreshReg$(_c, \"Quizzes\");","map":{"version":3,"names":["React","useState","useEffect","Quiz","useLocation","supabase","jsxDEV","_jsxDEV","Quizzes","_s","location","searchParams","URLSearchParams","search","lesson","get","wordList","setWords","kana","kanji","English","quizList","setQuiz","getWords","data","error","from","select","eq","console","warn","getQuestionChoices","currentIndex","setCurrentIndex","answeredQs","setAnsweredQs","nextQ","prevIndex","length","prevQ","setFirstQ","setLastQ","quizLength","answerBank","slice","randInt","result","i","Math","floor","random","splice","getAnswerChoices","index","answers","filter","val","onAnsweredQ","children","fileName","_jsxFileName","lineNumber","columnNumber","className","word","current_num","onClick","_c","$RefreshReg$"],"sources":["D:/source/repos/Yomi/JapaneseReadingWebsite/yomi/client/src/pages/Quizzes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Quiz from '../components/Quiz.js';\r\nimport { useLocation } from 'react-router';\r\nimport supabase from './supabaseclient.js';\r\nimport '../flashcard.css';\r\n\r\nfunction Quizzes () {\r\n    // get lesson # from URL\r\n    const location = useLocation();\r\n    const searchParams = new URLSearchParams(\r\n        location.search\r\n    );\r\n    const lesson = searchParams.get(\"lesson\");\r\n\r\n\r\n    // all words for this lesson\r\n    const [wordList, setWords] = React.useState([{kana: \"loading\", kanji: \"loading\", English: \"loading\"}]);\r\n    // random 10 words for this quiz\r\n    const [quizList, setQuiz] = React.useState([{kana: \"loading...\", kanji: \"loading...\", English: \"loading...\"}]);\r\n\r\n    // get words from DB\r\n    useEffect(() => {       \r\n        async function getWords() {         \r\n            const { data, error } = await supabase        \r\n            .from('Words')        \r\n            .select(`kana, kanji, English`)        \r\n            .eq('lesson', lesson)               \r\n            if (error) {          \r\n                console.warn(error)        \r\n            } else if (data) {  \r\n                setWords(data);\r\n            } \r\n        }\r\n\r\n        getWords();\r\n    }, [lesson])\r\n\r\n    // get words into quizList\r\n    useEffect(() => {setQuiz(getQuestionChoices(wordList, 10));}, [wordList]);\r\n\r\n    // keep track of current question and how many we've answered\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [answeredQs, setAnsweredQs] = useState(0);\r\n\r\n    const nextQ = () => {\r\n        // only lets you advance if you got this Q right\r\n        if (answeredQs > currentIndex) {\r\n            setCurrentIndex((prevIndex) => (prevIndex + 1) % quizList.length);\r\n        }\r\n    };\r\n\r\n    const prevQ = () => {\r\n        // don't go back further than 0\r\n        if (currentIndex !== 0) {\r\n            setCurrentIndex((prevIndex) => prevIndex === 0 ? quizList.length - 1 : prevIndex - 1);\r\n        }\r\n    };\r\n\r\n    const setFirstQ = () => {\r\n        setCurrentIndex(0);\r\n    }\r\n\r\n    const setLastQ = () => {\r\n        // go to last answered question\r\n        if(answeredQs < quizList.length) {\r\n            setCurrentIndex(answeredQs);\r\n        }\r\n        else {setCurrentIndex(quizList.length - 1);}\r\n    }\r\n\r\n    // function to choose 10 random words for each quiz\r\n    const getQuestionChoices = (wordList, quizLength) => {\r\n        if (answeredQs > 0) {\r\n            // already exists; do not recreate\r\n            return quizList;\r\n        }\r\n        let answerBank = wordList.slice(); // .slice is creating a copy so we don't modify the original\r\n        let randInt = 0;\r\n        let result = [];\r\n        for (let i = 0; i < quizLength; i++) {\r\n            // choose a unique word, add it to quizList\r\n            randInt = Math.floor(Math.random() * (answerBank.length));\r\n            result = [...result, answerBank[randInt]];\r\n            answerBank.splice(randInt, 1);\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // function to choose 3 random wordList that aren't the word in question + the word (for mult choice answers) \r\n    const getAnswerChoices = (index, wordList) => {\r\n        if (wordList.length <= 1) {\r\n            // not yet loaded\r\n            return [];\r\n        }\r\n        let answerBank = wordList.slice();\r\n        let answers = [quizList[index].English];\r\n        // remove the correct answer from possible answers\r\n        answerBank = answerBank.filter((val) => {return val.English !== quizList[index].English;});\r\n        let randInt = 0;\r\n        for (let i = 0; i < 3; i++) {\r\n            // choose a random word that's not the answer\r\n            randInt = Math.floor(Math.random() * (answerBank.length));\r\n            // either add it before or after in the list (to randomize order)\r\n            if (Math.floor(Math.random() * 2)) {\r\n                answers = [...answers, answerBank[randInt].English];\r\n            }\r\n            else {\r\n                answers = [answerBank[randInt].English, ...answers];\r\n            }\r\n            answerBank.splice(randInt, 1);\r\n        }\r\n        return answers;\r\n    }\r\n\r\n    const onAnsweredQ = () => {\r\n        if (answeredQs < quizList.length) {\r\n            setAnsweredQs(answeredQs + 1);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <br/>\r\n            <h1 className='page-title'>Lesson {lesson} Quiz</h1>\r\n            <Quiz word={quizList[currentIndex]} \r\n                answers={getAnswerChoices(currentIndex, wordList)} \r\n                current_num={currentIndex}\r\n                answeredQs={answeredQs} \r\n                onAnsweredQ={onAnsweredQ} \r\n            />\r\n            <div>\r\n                js\r\n                <button onClick={setFirstQ}>&lt;&lt;</button>\r\n                <button onClick={prevQ}>&lt;</button>\r\n                &nbsp;{currentIndex + 1} / {quizList.length}&nbsp;\r\n                <button onClick={nextQ}>&gt;</button>\r\n                <button onClick={setLastQ}>&gt;&gt;</button>\r\n\r\n                &nbsp;answered Qs: {answeredQs} &nbsp;&nbsp; {answeredQs >= quizList.length ? \"Complete!\" : \"\"}\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Quizzes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}