{"ast":null,"code":"var _jsxFileName = \"D:\\\\source\\\\repos\\\\Yomi\\\\JapaneseReadingWebsite\\\\yomi\\\\client\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Button from '@mui/material/Button';\nimport '../index.css';\nimport supabase from '../pages/supabaseclient.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz({\n  word,\n  answers,\n  current_num,\n  answeredQs,\n  onAnsweredQ\n}) {\n  _s();\n  const [message, setMessage] = useState(/*#__PURE__*/_jsxDEV(\"h3\", {\n    children: /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 48\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 44\n  }, this));\n  const checkUser = async () => {\n    const {\n      data: {\n        user\n      }\n    } = await supabase.auth.getUser();\n    if (!user || !word) return;\n    const baseRecord = {\n      userName: user.email,\n      Kana: word.kana,\n      English: word.English,\n      Genki: word.genki\n    };\n\n    // If word has romaji, include it\n    if (\"romaji\" in word) {\n      baseRecord.romaji = word.romaji;\n    }\n    await supabase.from(\"missedWords\").insert([baseRecord]);\n  };\n\n  // clicking an answer choice\n  const handleClick = ans => {\n    if (answeredQs <= current_num) {\n      // if current q is not finished\n      if (ans === word.English) {\n        setCorrect(ans);\n        onAnsweredQ();\n      } else {\n        checkUser();\n        setMessage(/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 32\n          }, this), \"Wrong! Try Again\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 28\n        }, this));\n      }\n    }\n  };\n  const setEmpty = () => {\n    setMessage(/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"\\u3000\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 25\n      }, this), \"\\u3000\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 20\n    }, this));\n  };\n  const setCorrect = ans => {\n    setMessage(/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [word.English, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 38\n      }, this), \"Correct! Good Job\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 20\n    }, this)); // 1 is true\n  };\n\n  // reset the message when moving between questions (when current_num changes)\n  useEffect(() => {\n    answeredQs > current_num ? setCorrect() : setEmpty();\n  }, [current_num]);\n\n  // button component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [word.kanji, \"\\xA0\", word.kana]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), answers.map(answer => /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      onClick: () => handleClick(answer),\n      children: answer\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 38\n    }, this)), message]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 9\n  }, this);\n}\n_s(Quiz, \"vv1QZH5sSq4nlO0483SssNGOf9o=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","Button","supabase","jsxDEV","_jsxDEV","Quiz","word","answers","current_num","answeredQs","onAnsweredQ","_s","message","setMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","checkUser","data","user","auth","getUser","baseRecord","userName","email","Kana","kana","English","Genki","genki","romaji","from","insert","handleClick","ans","setCorrect","setEmpty","className","kanji","map","answer","variant","onClick","_c","$RefreshReg$"],"sources":["D:/source/repos/Yomi/JapaneseReadingWebsite/yomi/client/src/components/Quiz.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Button from '@mui/material/Button';\r\nimport '../index.css';\r\nimport supabase from '../pages/supabaseclient.js';\r\n\r\nfunction Quiz({ word, answers, current_num, answeredQs, onAnsweredQ }) {\r\n    const [message, setMessage] = useState(<h3><br/></h3>);\r\n\r\n\r\n    const checkUser = async () => {\r\n        const { data: { user } } = await supabase.auth.getUser();\r\n        \r\n        if (!user || !word) return;\r\n      \r\n        const baseRecord = {\r\n          userName: user.email,\r\n          Kana: word.kana,\r\n          English: word.English,\r\n          Genki: word.genki\r\n        };\r\n      \r\n        // If word has romaji, include it\r\n        if (\"romaji\" in word) {\r\n          baseRecord.romaji = word.romaji;\r\n        }\r\n      \r\n        await supabase.from(\"missedWords\").insert([baseRecord]);\r\n      };\r\n  \r\n    // clicking an answer choice\r\n    const handleClick = (ans) => {\r\n        if (answeredQs <= current_num) { // if current q is not finished\r\n            if (ans === word.English) {\r\n                setCorrect(ans);\r\n                onAnsweredQ();\r\n            }\r\n            else {\r\n                checkUser(); \r\n                setMessage(<h3><br/>Wrong! Try Again</h3>);\r\n            }\r\n        }\r\n    };\r\n\r\n    const setEmpty = () => {\r\n        setMessage(<h3>　<br/>　</h3>);\r\n    }\r\n\r\n    const setCorrect = (ans) => {\r\n        setMessage(<h3>{word.English}<br/>Correct! Good Job</h3>); // 1 is true\r\n    }\r\n\r\n    // reset the message when moving between questions (when current_num changes)\r\n    useEffect(() => {answeredQs > current_num ? setCorrect() : setEmpty()}, [current_num]); \r\n\r\n    // button component\r\n    return (\r\n        <div className=\"question\">\r\n            <h2>{word.kanji}&nbsp;{word.kana}</h2>\r\n            {answers.map((answer) => <Button variant=\"contained\" onClick={() => handleClick(answer)}>{answer}</Button>)}\r\n            {message}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}